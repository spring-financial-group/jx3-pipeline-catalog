apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  creationTimestamp: null
  name: git-clone-pr
spec:
  stepTemplate:
    env:
      - name: HOME
        value: /tekton/home
    envFrom:
      - secretRef:
          name: jx-boot-job-env-vars
          optional: true
    name: ""
    resources: {}
  steps:
    - envFrom:
        - secretRef:
            name: jx-boot-job-env-vars
            optional: true
      image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.27.0
      name: git-clone
      resources: {}
      script: |
        #!/bin/sh
        set -x
        export SUBDIR="source"
        DEPTHS="100 200 500 1000 10000 50000"
        
        echo "git cloning url: $REPO_URL version $PULL_PULL_REF:$(echo $JOB_NAME | tr '[:lower:]' '[:upper:]')-$PULL_NUMBER@$PULL_PULL_SHA to dir: $SUBDIR"
        git config --global --add user.name ${GIT_AUTHOR_NAME:-jenkins-x-bot}
        git config --global --add user.email ${GIT_AUTHOR_EMAIL:-jenkins-x@googlegroups.com}
        git config --global credential.helper store
        echo "Optimizing git clone for PR"
        CLONE_SUCCESS=0
        for depth in $DEPTHS; do
            echo "Attempting shallow clone with depth $depth..."
            if git clone --depth "$depth" --branch "$PULL_BASE_REF" "$REPO_URL" "$SUBDIR"; then
                echo "Clone successful with depth $depth."
                CLONE_SUCCESS=1
                break
            else
                echo "Clone failed with depth $depth. Retrying with larger depth..."
                rm -rf "$SUBDIR:?"/*
            fi
        done
        # If the shallow clone attempts all fail, attempt a full clone
        if [ "$CLONE_SUCCESS" -eq 0 ]; then
            echo "Shallow clone failed. Attempting full clone..."
            if git clone --branch "$PULL_BASE_REF" "$REPO_URL" "$SUBDIR"; then
                echo "Full clone successful."
                CLONE_SUCCESS=1
            else
                echo "Full clone failed. Aborting."
                exit 1
            fi
        fi
        if [ "$CLONE_SUCCESS" -eq 1 ]; then
            echo "Proceeding with further steps after successful clone."
            cd $SUBDIR || exit
            git fetch origin $PULL_PULL_REF:$(echo $JOB_NAME | tr '[:lower:]' '[:upper:]')-$PULL_NUMBER
            git checkout $(echo $JOB_NAME | tr '[:lower:]' '[:upper:]')-$PULL_NUMBER
            git branch
            git reset --hard $PULL_PULL_SHA
            echo "checked out revision: $PULL_PULL_REF:$(echo $JOB_NAME | tr '[:lower:]' '[:upper:]')-$PULL_NUMBER@$PULL_PULL_SHA to dir: $SUBDIR"
        else
            echo "Cloning failed. Exiting."
            exit 1
        fi
      workingDir: /workspace
    - envFrom:
        - secretRef:
            name: jx-boot-job-env-vars
            optional: true
      image: ghcr.io/jenkins-x/jx-boot:3.10.154
      name: git-merge
      resources: {}
      script: |
        #!/usr/bin/env sh
        counter=0
        # Since a previous rebase can change the initial state of the branch, a successive rebase attempt can result in a conflict due to
        # the previous regeneration commit attempting to be picked ontop of a different initial state of the PR's branch. Thus, this retry
        # logic attempts to remove the latest regeneration commit and attempt the rebase again upon such conflicts.
        until [ "$counter" -eq 3 ]; do
          # lets avoid git rebase/merge conflicts on promotions
          # '-r' to avoid unexpected conflicts (e.g. rename/rename) when trying to rebase commits sharing the same base commit.
          # Preserving the merge commits thus ensures commits are always applied on top of their original base branch before being
          # merged back into the rebased branch.
          jx gitops git merge --rebase --merge-arg "-Xtheirs -r" && exit 0
          counter=$((counter+1))
          git rebase --abort
          if git log -1 --pretty=%B | grep -i regenerate; then
            git reset --hard HEAD~1
          fi
        done
        exit 1
      workingDir: /workspace/source
  workspaces:
    - description: The git repo will be cloned onto the volume backing this workspace
      mountPath: /workspace
      name: output
